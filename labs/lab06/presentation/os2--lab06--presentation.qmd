---
# Preamble

## Author
author:
  name: Гелдиев Ыхлас
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: 1032249184@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: Лабораторная работа №6
subtitle: Управление процессами
license: CC BY
date: 2025-10-11
## Generic options
lang: ru-RU
crossref:
  lof-title: Список иллюстраций
  lot-title: Список таблиц
  lol-title: Листинги
## Formats
format:
  ### Pdf output format
  beamer:
    include-in-header:
      text: |
        \usepackage{fontspec}
        \setmainfont{Noto Serif}
        \setsansfont{Noto Sans}
    toc: true
    toc-title: Содержание
    number-sections: true
    colorlinks: false
    toc-depth: 2
    slide_level: 2
    aspectratio: 169
    section-titles: true
    theme: metropolis
    themeoptions: progressbar=frametitle,sectionpage=progressbar,numbering=fraction
    #### Language
    babel-lang: russian
    babel-otherlangs: english
  ### Html output
  revealjs:
    transition: slide
    margin: 0.2
    smaller: false
    output-ext: html
    theme: beige
    logo: _resources/image/logo_rudn.png
---

# Информация

## Докладчик

- Гелдиев Ыхлас
- студент
- Российский университет дружбы народов им. П. Лумумбы
- [1032249184@pfur.ru](mailto:1032249184@pfur.ru)
- <https://geldiyevy.github.io/ru/>

## Цель работы

Получить навыки управления процессами операционной системы.

## Задание

1. Продемонстрируйте навыки управления заданиями операционной системы (см. раздел 6.4.1).

2. Продемонстрируйте навыки управления процессами операционной системы (см. раздел 6.4.2).
3. Выполните задания для самостоятельной работы (см. раздел 6.5)

# Выполнение лабораторной работы

## Управление заданиями

## Получите полномочия администратора

`su -`

![`su -`](image/1.png)

## Введите следующие команды: ([рис. @fig-001])

`sleep 3600 &`
`dd if=/dev/zero of=/dev/null &`
`sleep 7200`

## Поскольку вы запустили последнюю команду без & после неё, у вас есть 2 часа, прежде

чем вы снова получите контроль над оболочкой. Введите `Ctrl + z` , чтобы остановить
процесс. ([рис. @fig-001])

## Введите ([рис. @fig-001])

`jobs`
Вы увидите три задания, которые вы только что запустили. Первые два имеют состояние `Running`, а последнее задание в настоящее время находится в состоянии
`Stopped`.

## Для продолжения выполнения задания 3 в фоновом режиме введите ([рис. @fig-001])

`bg 3`
С помощью команды `jobs` посмотрите изменения в статусе заданий. ([рис. @fig-001])

## Для перемещения задания 1 на передний план введите ([рис. @fig-001])

`fg 1`

## Введите `Ctrl + c` , чтобы отменить задание 1. С помощью команды jobs посмотрите изменения в статусе заданий. ([рис. @fig-001])

## Проделайте то же самое для отмены заданий 2 и 3. ([рис. @fig-001])

![Делаю 2, 3, 4, 5, 6, 7, 8](image/2.png){#fig-001}

## Откройте второй терминал и под учётной записью своего пользователя введите в нём: ([рис. @fig-003])

`dd if=/dev/zero of=/dev/null &`

## Введите exit, чтобы закрыть второй терминал. ([рис. @fig-003])

![`dd if=/dev/zero of=/dev/null && exit`](image/3.png){#fig-003}

## На другом терминале под учётной записью своего пользователя запустите

    `top`
    Вы увидите, что задание dd всё ещё запущено. Для выхода из `top` используйте `q` .

    ![`top`](image/top1.png)

## Вновь запустите `top` и в нём используйте k , чтобы убить задание `dd`. После этого

    выйдите из `top`.

    ![`top2`](image/top2.png)

## Управление процессами

## Получите полномочия администратора ([рис. @fig-004])

`su -`

## Введите следующие команды: ([рис. @fig-004])

`dd if=/dev/zero of=/dev/null &`
`dd if=/dev/zero of=/dev/null &`
`dd if=/dev/zero of=/dev/null &`

## Введите ([рис. @fig-004])

`ps aux | grep dd`
Это показывает все строки, в которых есть буквы dd. Запущенные процессы dd идут
последними.

## Используйте PID одного из процессов dd, чтобы изменить приоритет. Используйте ([рис. @fig-004])

`renice -n 5 <PID>`

## Введите ([рис. @fig-004])

`ps fax | grep -B5 dd`
Параметр -B5 показывает соответствующие запросу строки, включая пять строк до
этого. Поскольку `ps fax` показывает иерархию отношений между процессами, вы
также увидите оболочку, из которой были запущены все процессы `dd`, и её `PID`.

![Делаю 1, 2, 3, 4, 5](image/4.png){#fig-004}

## Найдите PID корневой оболочки, из которой были запущены процессы dd, и введите

`kill -9 <PID>`
(заменив <PID> на значение PID оболочки). Вы увидите, что ваша корневая оболочка
закрылась, а вместе с ней и все процессы dd. Остановка родительского процесса —
простой и удобный способ остановить все его дочерние процессы.

![`kill -9 3532`](image/kill1.png)

# Самостоятельная работа

# Задание 1

## Запустите команду

`dd if=/dev/zero of=/dev/null`
трижды как фоновое задание. ([рис. @fig-005])

## Увеличьте приоритет одной из этих команд, используя значение приоритета −5. ([рис. @fig-005])

## Измените приоритет того же процесса ещё раз, но используйте на этот раз значение −15. ([рис. @fig-005])

В чём разница?

- Чем ниже значение приоритета, тем приоритетнее задача

## Завершите все процессы `dd`, которые вы запустили ([рис. @fig-005])

![Задание 1](image/mission1.png){#fig-005}

# Задание 2

## Запустите программу yes в фоновом режиме с подавлением потока вывода. ([рис. @fig-006])

2. Запустите программу yes на переднем плане с подавлением потока вывода. Приостановите выполнение программы. Заново запустите программу yes с теми же параметрами, затем завершите её выполнение. ([рис. @fig-006])

## Запустите программу yes на переднем плане без подавления потока вывода. Приостановите выполнение программы. Заново запустите программу yes с теми же параметрами, затем завершите её выполнение. ([рис. @fig-006])

![Задание 2.1](image/mission2.1.png){#fig-006}

## Проверьте состояния заданий, воспользовавшись командой jobs. ([рис. @fig-007])

## Переведите процесс, который у вас выполняется в фоновом режиме, на передний план, затем остановите его. ([рис. @fig-007])

![Задание 2.2](image/mission2.2.png){#fig-007}

## Переведите любой ваш процесс с подавлением потока вывода в фоновый режим. ([рис. @fig-008])

Проверьте состояния заданий, воспользовавшись командой jobs. Обратите внимание, что процесс стал выполняющимся (Running) в фоновом режиме. ([рис. @fig-008])

![Задание 2.3](image/mission2.3.png){#fig-008}

## Запустите процесс в фоновом режиме таким образом, чтобы он продолжил свою работу даже после отключения от терминала.

![Задание 2.4](image/mission2.4.png)

## Закройте окно и заново запустите консоль. Убедитесь, что процесс продолжил свою работу.

![Задание 2.5](image/mission2.5.png)

## Получите информацию о запущенных в операционной системе процессах с помощью утилиты top.

![Задание 2.6](image/mission2.6.png)

## Запустите ещё три программы yes в фоновом режиме с подавлением потока вывода. ([рис. @fig-009])

Убейте два процесса: для одного используйте его PID, а для другого — его идентификатор конкретного задания. ([рис. @fig-009])

![Задание 2.7](image/mission2.7.png){#fig-009}

## Попробуйте послать сигнал 1 (SIGHUP) процессу, запущенному с помощью nohup, и обычному процессу.

![Задание 2.8](image/mission2.9.png)

## Запустите ещё несколько программ yes в фоновом режиме с подавлением потока вывода.

![Задание 2.9](image/mission2.8.png)

## Завершите их работу одновременно, используя команду killall.

![Задание 2.10](image/mission2.10.png)

## Запустите программу yes в фоновом режиме с подавлением потока вывода. Используя утилиту nice, запустите программу yes с теми же параметрами и с приоритетом, большим на 5. Сравните абсолютные и относительные приоритеты у этих двух процессов.

![Задание 2.11](image/mission2.11.png)

##

![`top`](image/mission2.12.png)

## Используя утилиту renice, измените приоритет у одного из потоков yes таким образом, чтобы у обоих потоков приоритеты были равны.

![`renice`](image/mission2.13.png)

# Контрольные вопросы

## Какая команда даёт обзор всех текущих заданий оболочки?

- jobs

## Как остановить текущее задание оболочки, чтобы продолжить его выполнение в фоновом режиме?

- Ctrl‑Z → bg

## Какую комбинацию клавиш можно использовать для отмены текущего задания оболочки?

- Ctrl‑C

## Необходимо отменить одно из начатых заданий. Доступ к оболочке, в которой в данный момент работает пользователь, невозможен. Что можно сделать, чтобы отменить задание?

- kill -9 <PID> (узнать PID через ps/pgrep из другой сессии)

## Какая команда используется для отображения отношений между родительскими и дочерними процессами?

- pstree или ps -ejH

## Какая команда позволит изменить приоритет процесса с идентификатором 1234 на более высокий?

- renice -n -<value> 1234

## В системе в настоящее время запущено 20 процессов dd. Как проще всего остановить их все сразу?

- pkill -f '^dd$' или killall dd

## Какая команда позволяет остановить команду с именем mycommand?

- pkill -f '^mycommand$'

## Какая команда используется в top, чтобы убить процесс?

- В top нажать k, ввести PID и сигнал (обычно 9)

## Как запустить команду с достаточно высоким приоритетом, не рискуя, что не хватит ресурсов для других процессов?

- nice -n -<value> command (отрицательное значение nice)

## Выводы

Я получил навыки управления процессами операционной системы.
